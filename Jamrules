if ! $(top_builddir)
{
    top_builddir = $(TOP) ;
}
top_srcdir = $(TOP) ;

# unset some stuff defined in Jambase
LEX = ;

JAMCONFIG ?= $(top_builddir)/Jamconfig ;
include $(JAMCONFIG) ;
if ! $(JAMCONFIG_READ)
{
  EXIT "Couldn't find config. Please run 'configure' first." ;
}

if $(USE_STLPORT_DEBUG)
{
  CXXFLAGS += -I/usr/include/stlport ;
  CXXFLAGS += -D_STLP_DEBUG=1 -D_STLP_DEBUG_UNINITIALIZED=1 ;
  CXXFLAGS += -D_STLP_SHRED_BYTE=0xA3 ;
  LIBS += -lstlport_gcc_debug ;
}

switch $(VARIANT) {
    case optimize :
        CFLAGS += -Wall -O3 -g ;
        CXXFLAGS += -Wall -O3 -g ;
        LIBS += -g ;
    case debug :
        CFLAGS += -Wall -W -Werror -O0 -g3 -DDEBUG ;
        CXXFLAGS += -Wall -W -Werror -O0 -g3 -DDEBUG ;
        LIBS += -g3 ;
    case profile :
        CFLAGS += -Wall -W -O3 -g3 -pg ;
        CXXFLAGS += -Wall -W -O3 -g3 -pg ;
        LIBS += -g3 -pg ;
    case * :
        EXIT "Invalid variant $(VARIANT) selected" ;
}

LINK = $(CXX) ;

# Include build rules
include $(TOP)/mk/jam/build.jam ;

# Include Dirs
IncludeDir $(top_builddir) ; # for config.h
IncludeDir $(top_srcdir)/src ;

actions quietly Append
{
  echo $(>) >> $(<) ;
}

rule DumpVar
{
  for FILE in $(>)
  {
    Append $(<) : $(FILE) ;
  }
  Depends $(<) : $(>) ;
}

if $(XGETTEXT) != ""
{
    actions XGetText
    {
        $(XGETTEXT) $(XGETTEXT_FLAGS) -o $(<) -f $(>)
    }
    rule MakePot
    {
      if $(>) {
        DumpVar $(<).in : $(>) ;
        XGetText $(<) : $(<).in ;
        RmTemps $(<) : $(<).in ;
        Depends $(<) : $(<).in ;
        Depends all : $(<) ;
      }
    }
} else {
    rule MakePot
    { }
}
